var buildType = 'static';  // static, jekyll, drupal
var source = '../../source';
var build = '../../';

// static builds will be created in the 'public' folder
if (/(static|jekyll)/.test(buildType)) {
    build += 'public';
}

var pkg = require('./package.json');
var flags = require('minimist')(process.argv.slice(2));

/* Project Configuration
==================================================================================================== */
module.exports = {
    source: source,
    build: build,
    buildType: buildType,

    flag: {
        doWatch: flags.watch || false,
        isProduction: flags.production || false,
        isDevelopment: !flags.production || false,
        message: {
            production: '  --flag: optimize, minify and/or gzip files for production',
            watch: '  --flag: monitor files and update per file type & task(s)\n'
        }
    },
    meta: {
        banner: function() {
            var _banner = [
                (pkg.title || pkg.name) + ' - v' + pkg.version + ' - ' + pkg.author,
                '[WARNING] This file is auto-generated.',
                'Do not edit this file. All changes will be lost on next compilation!'
            ];
            return '/*! ' + _banner.join('\n    ') + ' */';
        }
    },
    browsersync: {
        //proxy: 'public.drupal7.broco',
        server: { baseDir: build },
        open: true,
        notify: false,
        // See: System Preferences… » Sound » Sound Effects
        sound: 'Basso'
    },
    scss: {
        files: source + '/css/scss/*.scss',
        copyFiles: source + '/css/!(scss)*/**/*',
        watchFiles: source + '/css/scss/**/*',
        destination: build + '/assets/css',
        options: {
            outputStyle: (flags.production) ? 'compressed' : 'expanded', // nested, expanded, compact, compressed
            precision: 3,
            errLogToConsole: true
        }
    },
    js: {
        filename: 'main.js',
        concatFiles: [
            source + '/js/libs/*.js',
            source + '/js/utils/*.js',
            source + '/js/modules/!(application)*.js',
            source + '/js/modules/application.js'
        ],
        copyFiles: [
            source + '/js/vendor/**/*',
            source + '/js/on-demand/**/*'
        ],
        watchFiles: source + '/js/**/*.js',
        destination: build + '/assets/js'
    },
    html: {
        files: source + '/static-html/*.html',
        watch: [source + '/static-html/*.html', source + '/static-html/template/**/*'],
        destination: build,
        context: {
            isDevelopment: !flags.production,
            author: pkg.author,
            version: pkg.version
        }
    },
    jekyll: {
        files: source + '/static-jekyll/**/*',
        config: source + '/static-jekyll/_config.yml',
        source: source + '/static-jekyll',
        destination: build
    }
};
